{"version":3,"sources":["Containers/UploadAudioPage/index.jsx","Modals/Preloader/index.jsx","Components/AudioWaveform/index.jsx","Components/TrimSlider/index.jsx","Components/AudioDurationScale/index.jsx","Components/TimestampNotesAdd/index.jsx","Components/TimestampNotesList/index.jsx","Containers/DisplayAudioFile/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["UploadAudioPage","sendAudioFile","useState","audioFile","setAudioFile","navigate","useNavigate","className","type","accept","onChange","e","target","files","onClick","disabled","href","rel","Preloader","show","AudioWaveform","props","isLoading","setIsLoading","playing","setPlaying","volume","setVolume","trimStart","setTrimStart","trimEnd","setTrimEnd","waveformWidth","setWaveformWidth","waveform","useRef","waveformContainer","trimStartRef","userPaused","useEffect","current","WaveSurfer","create","container","progressColor","cursorColor","loadBlob","on","clientWidth","seekTo","setCurrentTime","getCurrentTime","pause","destroy","getDuration","id","ref","side","trimLim","setTrim","val","audioDuration","play","class","htmlFor","name","min","max","step","value","TrimSlider","slider","onMouseDown","clickedPos","window","event","clientX","offsetWidth","document","onmouseup","onmousemove","widthChange","style","width","Math","AudioDurationScale","chunkSize","setChunkSize","roughSize","round","axisMarkers","Array","parseInt","keys","map","n","x","toString","y","fill","fontSize","floor","slice","height","TimestampNotesAdd","note","setNote","currentTime","setNotes","prevNotes","allNotes","concat","timestamp","sort","a","b","TimestampNotesList","listNotes","notes","index","deleteNote","DisplayAudioFile","App","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5d621087.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { useNavigate } from 'react-router-dom';\nimport './index.scss';\n\nconst UploadAudioPage = ({ sendAudioFile }) => {\n  const [audioFile, setAudioFile] = useState(null);\n  const navigate = useNavigate();   // to reroute to waveform analysis route\n\n  const uploadFile = () => {\n    // audioFile sent to lifted state in App.js, and rerouted\n    sendAudioFile(audioFile);\n    navigate('/analyzeAudio');\n  }\n\n  return (\n    <div className='file-upload-form-page'>\n      <div className='file-upload-form'>\n        <input type='file' accept='audio/*' onChange={e => setAudioFile(e.target.files[0])} />\n        <button onClick={uploadFile} disabled={audioFile === null}>Upload</button>\n\n        <hr />\n        <a href='https://substancia.github.io/randomStorage/testmusic.mp3'target='_blank'\n          rel='noopener noreferrer'><button>Download sample music</button></a>\n      </div>\n    </div>\n  );\n}\n\nexport default UploadAudioPage;","import React from \"react\";\nimport './index.scss';\n\nconst Preloader = ({ show }) =>\n  show ?\n    <div className='preloader-container'>\n      <div className='modal-bg' />\n      <div className='preloader' />\n    </div> :\n    null\n\nexport default Preloader;","import React, { useEffect, useRef, useState } from \"react\";\nimport WaveSurfer from \"wavesurfer.js\";\nimport { AudioDurationScale, TrimSlider } from \"..\";\nimport { Preloader } from \"../../Modals\";\nimport './index.scss';\n\nconst AudioWaveform = props => {\n  // states and refs for Wavesurfer.js instance\n  const [isLoading, setIsLoading] = useState(true);\n  const [playing, setPlaying] = useState(false);\n  const [volume, setVolume] = useState(0.5);\n  const [trimStart, setTrimStart] = useState(0);\n  const [trimEnd, setTrimEnd] = useState(1);\n  const [waveformWidth, setWaveformWidth] = useState(null);\n  const waveform = useRef(null);\n  const waveformContainer = useRef(null);\n  const trimStartRef = useRef(trimStart);\n  const userPaused = useRef(false);\n\n  useEffect(() => {\n    // initializing Wavesurfer instance\n    waveform.current = WaveSurfer.create({\n      container: waveformContainer.current,\n      progressColor: \"OrangeRed\",\n      cursorColor: \"OrangeRed\",\n    });\n    // loading audio file\n    waveform.current.loadBlob(props.audioFile);\n    // assigning event listeners\n    waveform.current.on('ready', () => {\n      waveform.current.setVolume(volume);\n      setWaveformWidth(waveformContainer.current.clientWidth);\n      setIsLoading(false);\n    });\n    waveform.current.on('finish', () => {\n      waveform.current.seekTo(trimStartRef.current);\n      setPlaying(false);\n    });\n    waveform.current.on('pause', () => {\n      if(userPaused.current) {    // if not paused by user, send cursor to start\n        userPaused.current = false;\n      } else {\n        waveform.current.seekTo(trimStartRef.current);\n      }\n      setPlaying(false);\n      props.setCurrentTime(waveform.current.getCurrentTime());    // for notes\n    });\n    waveform.current.on('seek', () => {\n      userPaused.current = true;\n      waveform.current.pause();\n      setPlaying(false);\n      props.setCurrentTime(waveform.current.getCurrentTime());    // for notes\n    });\n\n    // component destructor\n    return () => waveform.current.destroy();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.audioFile]);\n\n  // to bring the cursor to after the left trim\n  useEffect(() => {\n    const currentPos = waveform.current.getCurrentTime() / waveform.current.getDuration();\n    if(currentPos < trimStart) {\n      waveform.current.seekTo(trimStart);\n    }\n\n    trimStartRef.current = trimStart;\n  }, [trimStart]);\n\n  // to bring the cursor to before the right trim\n  useEffect(() => {\n    const currentPos = waveform.current.getCurrentTime() / waveform.current.getDuration();\n    if(currentPos > trimEnd) {\n      waveform.current.seekTo(trimEnd);\n      userPaused.current = true;\n      waveform.current.pause();\n    }\n  }, [trimEnd]);\n\n\n  // play/pause button\n  const handlePlayPause = () => {\n    if(playing) {\n      userPaused.current = true;\n      waveform.current.pause();\n    } else {\n      waveform.current.play(waveform.current.getCurrentTime(), trimEnd * waveform.current.getDuration());\n    }\n    setPlaying(!playing);\n  }\n\n  // restart button\n  const setToStart = () => {\n    waveform.current.seekTo(trimStart);\n    waveform.current.play(waveform.current.getCurrentTime(), trimEnd * waveform.current.getDuration());\n    setPlaying(true);\n  }\n\n  // volume slider\n  const handleVolumeChange = e => {\n    setVolume(e.target.value);\n    waveform.current.setVolume(e.target.value || 1);\n  }\n\n\n  return (\n    <div className='audio-container'>\n      {/* Preloader */}\n      <Preloader show={isLoading} />\n\n      {/* Waveform made by wavesurfer.js instance attached to below div */}\n      <div id='audio-waveform' ref={waveformContainer}>\n\n        {/* left and right trims, hand-written because no built-in trims in the library */}\n        <TrimSlider\n          side='left'\n          trimLim={trimEnd*waveformWidth}\n          setTrim={val => setTrimStart(val/waveformWidth)}\n        />\n        <TrimSlider\n          side='right'\n          trimLim={(1 - trimStart)*waveformWidth}\n          setTrim={val => setTrimEnd(1 - val/waveformWidth)}\n        />\n\n      </div>\n\n      {/* Audio time scale at bottom of waveform */}\n      <AudioDurationScale\n        audioDuration={waveform.current !== null ? waveform.current.getDuration() : null}\n        waveformWidth={waveformWidth || 0}\n      />\n\n      <div className='audio-controls'>\n        <div className='buttons'>\n          {/* Agent/Customer switch, not hooked because not specified */}\n          <label className='switch'>\n            <input type='checkbox' />\n            <span className='slider' />\n          </label>\n\n          {/* play/pause button */}\n          <button onClick={handlePlayPause} className='no-border'>\n            <i class={`fas fa-${ playing ? 'pause' : 'play' }`} />\n          </button>\n\n          {/* restart button */}\n          <button onClick={setToStart} className='no-border'>\n            <i class='fas fa-undo' />\n          </button>\n\n          {/* Trim button, not hooked because trimmed file not being sent anywhere */}\n          <button><i class='fas fa-cut' /> Trim</button>\n        </div>\n\n        <div className='scales'>\n          {/* Zoom functionality causing mismatched trimming with the\n          hand-written trim functionality hence not included here\n          (implemented in separate branch 'zoom-scale' on Git) */}\n\n          {/* Volume slider */}\n          <div className='volume-control'>\n            <label htmlFor='volume'><i class=\"fas fa-volume-up\" /></label>\n            <input\n              name='volume'\n              type='range'\n              min='0'\n              max='1'\n              step='0.025'\n              onChange={handleVolumeChange}\n              value={volume}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default AudioWaveform;","// reusable trim component, used for both left and right trim with props.side\n\nimport React, { useRef } from \"react\";\nimport './index.scss';\n\nconst TrimSlider = props => {\n  // using ref to make draggable borders\n  const slider = useRef(null);\n\n  // subscribing mouse movements to drag movements\n  const dragCursor = () => {\n    const e = window.event;\n    const clickedPos = e.clientX;\n    const offsetWidth = slider.current.offsetWidth;\n\n    // click release unsubscribes mouse from the dragging\n    document.onmouseup = () => {\n      document.onmousemove = null;\n      document.onmouseup = null;\n      // sending resized division width as \"trim\" width. wave portion behind trim div is inaccessible.\n      props.setTrim(slider.current.offsetWidth);\n    }\n\n    // tracking mouse movement for dragging borders\n    document.onmousemove = () => {\n      const e = window.event;\n      let widthChange = e.clientX - clickedPos;\n      if(props.side === 'right')\n        widthChange *= -1;\n      slider.current.style.width = Math.min((offsetWidth + widthChange), props.trimLim) + 'px';\n    }\n  }\n\n  return (\n    <div className={`trim-slider trim-slider-${props.side}`} ref={slider}>\n      <div className='trim-slider-bg' />\n      <div\n        className={`trim-slider-cursor trim-slider-cursor-${props.side}`}\n        onMouseDown={dragCursor}\n      />\n    </div>\n  );\n}\n\nexport default TrimSlider;","// Simple axis time scale for waveform, made with SVGs\n\nimport React, { useEffect, useState } from \"react\";\nimport './index.scss';\n\nconst AudioDurationScale = ({ audioDuration, waveformWidth }) => {\n  // lease count\n  const [chunkSize, setChunkSize] = useState(10);\n\n  // setting least count of axis\n  useEffect(() => {\n    if(audioDuration > 0) {\n      let roughSize = audioDuration / 8;\n      setChunkSize(Math.max((Math.round(roughSize / 5)) * 5, 1));\n    }\n  }, [audioDuration]);\n\n  // time markers for the axis, written in minutes (seconds version commented)\n  const axisMarkers = [...Array(parseInt(audioDuration / chunkSize) + 1).keys()]\n    .map(n =>\n      <text\n        key={n}\n        x={((n * chunkSize / audioDuration) * waveformWidth).toString()}\n        y='15'\n        fill='black'\n        fontSize='14'\n      >\n        {/* {(n * chunkSize).toString() + 's'} */}\n        {`${Math.floor(n * chunkSize / 60)}:${('0' + (n * chunkSize) % 60).slice(-2)}`}\n      </text>\n    );\n\n  return (\n    <div className='audioDurationScale'>\n      <svg height='20' width={waveformWidth.toString()}>\n        {axisMarkers}\n        Sorry, your browser does not support inline SVG.\n      </svg>\n    </div>\n  );\n}\n\nexport default AudioDurationScale;","// component for creating notes at different timestamps\n\nimport React, { useState } from \"react\";\nimport './index.scss';\n\nconst TimestampNotesAdd = props => {\n  const [note, setNote] = useState('');\n\n  // adding notes to the collection and sorting with timestamps\n  const addNote = () => {\n    props.setNotes(prevNotes => {\n      let allNotes = prevNotes.concat([{\n        timestamp: props.currentTime,\n        note: note\n      }]);\n      allNotes.sort((a, b) => a.timestamp - b.timestamp);\n      return allNotes;\n    });\n\n    setNote('');\n  }\n\n  return (\n    <div className='new-note'>\n      <p>Timestamp: {props.currentTime}s</p>\n\n      <label htmlFor='note'>Enter note:</label>\n      <textarea name='note' value={note} onChange={e => setNote(e.target.value)} />\n\n      <button onClick={addNote}>Add note</button>\n    </div>\n  );\n}\n\nexport default TimestampNotesAdd;","// component for listing notes with timestamps\n\nimport React from \"react\";\nimport './index.scss';\n\nconst TimestampNotesList = props => {\n  // delete button for each note\n  const deleteNote = index => {\n    props.setNotes(props.notes.slice(0, index)\n      .concat(props.notes.slice(index + 1))\n    );\n  }\n\n  // note objects list mapping to note cards\n  const listNotes = props.notes.map((note, index) =>\n    <div className='note' key={index}>\n\n      <button className='delete' onClick={() => deleteNote(index)}>\n        <i class=\"fas fa-times\" />\n      </button>\n\n      <p>Timestamp: {note.timestamp}s</p>\n      <p>Note: {note.note}</p>\n    </div>\n  );\n\n  return (\n    <div className='list-notes'>\n      <h4>Notes</h4>\n      {listNotes}\n    </div>\n  );\n}\n\nexport default TimestampNotesList;","import React, { useState } from \"react\";\nimport { AudioWaveform, TimestampNotesAdd, TimestampNotesList } from '../../Components';\nimport './index.scss';\n\nconst DisplayAudioFile = ({ audioFile }) => {\n  // states for notes keeping\n  const [notes, setNotes] = useState([]);\n  const [currentTime, setCurrentTime] = useState(0);\n\n  // processing timestamps into ms precision\n  const processTimestamp = timestamp =>\n    setCurrentTime(Math.round(timestamp * 1000) / 1000);\n\n  return (\n    <div className='display-audioFile'>\n      <AudioWaveform\n        audioFile={audioFile}\n        setCurrentTime={processTimestamp}\n      />\n      \n      {/* Container made for adding timestamp-notes feature (assignment 1)\n      for future implementations */}\n      <div className='timestamp-notes'>\n        <TimestampNotesAdd setNotes={setNotes} currentTime={currentTime} />\n        <TimestampNotesList notes={notes} setNotes={setNotes} />\n      </div>\n    </div>\n  );\n}\n\nexport default DisplayAudioFile;","import React, { useState } from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport { DisplayAudioFile, UploadAudioPage } from './Containers';\n\nconst App = () => {\n  // Uploaded audio file state lifter to App.js\n  const [audioFile, setAudioFile] = useState(null);\n\n  return (\n    <div className=\"App\">\n      <Routes>\n        {/* Default route points to audio file upload form */}\n        <Route path='/' element={\n          <UploadAudioPage sendAudioFile={setAudioFile} />\n        } />\n\n        {/* Audio file upload reroutes to this route for waveform analysis */}\n        <Route path='/analyzeAudio' element={\n          <DisplayAudioFile audioFile={audioFile} />\n        } />\n\n      </Routes>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}